    (function ($, window, undefined) {
        $.callList = {
            _version: { lastUpdate: '2015-01-28', version: 1.13 },
            _initialLoad: true,
            uiElementName: "#grid",
            uiElementGrid: undefined,
            loadingData: false,
            grid: function () { return $($.callList.uiElementName); },
            setProgress: function(enable) {
                $.callList.loadingData = enable;
                kendo.ui.progress($.callList.grid(), enable);
                $(".k-loading-image").css("background", "rgba(0, 0, 0, 0) url('/hpi-s/images/spinner-dark.gif') no-repeat scroll 50% 50% / auto padding-box border-box");
            },
            getActiveStatusesJson: function () {
                var statuses = $qad.statuses.slice(1, $qad.statuses.length);
                console.log("---");
                console.log(statuses);
                console.log("---");
                var idxRemove = $.inArray("CANCEL", statuses);
                if (idxRemove >= 0) {
                    statuses.splice(idxRemove, 1);
                }
                idxRemove = $.inArray("CLOSED", statuses);
                if (idxRemove >= 0) {
                    statuses.splice(idxRemove, 1);
                }
                return $.callList._jsonToCsv(statuses);
            },
            data: {
                all: new kendo.data.ObservableArray([]),
                // Parse data from server
                parse: function (data) {
                    if (data) {
                        var withoutComment = data.replace('<!-- Generated by Webspeed: http://www.webspeed.com/ -->', ''); // Workaround to remove the xml comment from webspeed generated JSON...
                        try {
                            var parsed = $.parseJSON(withoutComment);
                            return parsed;
                        } catch (e) {
                            console.log(e);
                            return null;
                        }
                    }
                },
            },
            addStyles: function () { // Add styles for text blinking
                /*$('<style type="text/css"> .blink_text {    -webkit-animation-name: blinker;    -webkit-animation-duration: 0.7s;    -webkit-animation-timing-function: linear;        -webkit-animation-iteration-count: infinite;                -moz-animation-name: blinker;        -moz-animation-duration: 0.7s;        -moz-animation-timing-function: linear;             -moz-animation-iteration-count: infinite;                        animation-name: blinker;             animation-duration: 0.7s;             animation-timing-function: linear;                animation-iteration-count: infinite;                                  background-color: black;             }                        @-moz-keyframes blinker {                 0% { opacity: 1.0; }             50% { opacity: 0.0; }         100% { opacity: 1.0; } } @-webkit-keyframes blinker { 0% { opacity: 1.0; }  50% { opacity: 0.0; }  100% { opacity: 1.0; } } @keyframes blinker { 0% { opacity: 1.0; } 50% { opacity: 0.0; } 100% { opacity: 1.0; } }  </style>').appendTo("head");*/
                $('<style type="text/css"> @-webkit-keyframes blink_text {    from { background-color: orange; }    to { background-color: inherit; }  }  @-moz-keyframes blink_text {    from { background-color: orange; }    to { background-color: inherit; }  }  @-o-keyframes blink_text {    from { background-color: orange; }    to { background-color: inherit; }  }  @keyframes blink_text {    from { background-color: orange; }    to { background-color: inherit; }  }    .blink_text {    -webkit-animation: blink_text 0.7s infinite; /* Safari 4+ */    -moz-animation:    blink_text 0.7s infinite; /* Fx 5+ */    -o-animation:      blink_text 0.7s infinite; /* Opera 12+ */    animation:         blink_text 0.7s infinite; /* IE 10+ */  }  </style>').appendTo("head");
                $('<style type="text/css">.k-state-selected td {  border-left: 1px solid black !important;border-top: 2px solid black !important;border-bottom: 1px solid black !important; }</style>').appendTo("head");

            },
            menuColumnsSelector: { // Allow the user to select columns to show/hide
                _selector: "#select-columns",
                init: function () {
                    var g = $.callList.uiElementGrid;
                    var ds = [];
                    for (var i = 0, max = g.columns.length; i < max; i++) {
                        ds.push({
                            encoded: false,
                            text: "<label><input type='checkbox' checked='checked' " +
                                  " class='check' data-field='" + g.columns[i].field +
                                  "'/>" + g.columns[i].title + "</label>"
                        });
                    }
                    $(this._selector).kendoMenu({
                        dataSource: [{
                            text: "Columns",
                            items: ds
                        }],
                        openOnClick: true,
                        closeOnClick: false,
                        open: function (e) {
                            var selector;
                            $("ul.k-group").css({ 'text-align': 'left' });
                            $.each(g.columns, function () {
                                if (this.hidden) {
                                    selector = "input[data-field='" + this.field + "']";
                                    $(selector).prop("checked", false);
                                }
                            });
                        },
                        select: function (e) { // don't show/hide for menu button
                            if ($(e.item).parent().filter("div").length) return;
                            var input = $(e.item).find("input.check");
                            var field = $(input).data("field");
                            if ($(input).is(":checked")) {
                                g.showColumn(field);
                            } else {
                                g.hideColumn(field);
                            }
                        }
                    });
                }
            },
            toolbarAutoRefresh: { // Auto refresh toolbar button logic
                _running: false,
                wantsAutoRefresh: false,
                _currentInterval: 0,
                _targetSelector: "div [data-toolbarcmd='auto-refresh']",
                reset: function () {
                    // Restart if was already started.
                    self = $.callList.toolbarAutoRefresh;
                    self._currentInterval = 30;
                    if (self._running || self.wantsAutoRefresh) self.start();
                },
                _addRemoveClasses: function (target, add) {
                    self = $.callList.toolbarAutoRefresh;
                    if (target == undefined) target = $(self._targetSelector);
                    if (add == true) {
                        if (!$(target).hasClass("k-state-active")) $(target).addClass("k-state-active");
                        var ctd = $('#auto-refresh-countdown');
                        if (ctd == undefined || ctd == null || ctd.length == 0) {
                            $('<span style="margin-left:5px;" id="auto-refresh-countdown"></span>').appendTo(target);
                        }
                    } else {
                        $(target).removeClass("k-state-active");
                        $('#auto-refresh-countdown').remove();
                    }
                },
                start: function (target) {
                    self = $.callList.toolbarAutoRefresh;
                    if (self.wantsAutoRefresh == false && (target == undefined || target == null)) return;
                    self._currentInterval = 30;
                    if (target == undefined) target = $(self._targetSelector);

                    if (self._running) {
                        self._addRemoveClasses(target, true);
                        return;
                    }
                    self._running = true;
                    self.wantsAutoRefresh = true;
                    self._addRemoveClasses(target, true);
                    self._autoRefreshInterval = setInterval(function () {
                        self = $.callList.toolbarAutoRefresh;
                        self._running = true;
                        if (self._currentInterval >= 0) {
                            $('#auto-refresh-countdown').text(self._currentInterval);
                        }
                        if (self._currentInterval <= 0) {
                            self._currentInterval = 30;
                            self.stop();
                            self.wantsAutoRefresh = true;
                            $.callList.uiElementGrid.dataSource.read();
                            $.callList.uiElementGrid.refresh();
                        } else {
                            self._currentInterval--;
                        }
                    }, 1000);
                },
                stop: function (target) {
                    if (target == undefined) target = $($.callList.toolbarAutoRefresh._targetSelector);
                    //console.log("stop toolbar...");
                    //console.log(self._autoRefreshInterval);
                    $.callList.toolbarAutoRefresh.wantsAutoRefresh = false;
                    self._addRemoveClasses(target, false);
                    clearInterval($.callList.toolbarAutoRefresh._autoRefreshInterval);
                    self._running = false;
                    console.log("remove countdown...");
                },
                set: function (target) {
                    if (target.hasClass("k-state-active")) {
                        $.callList.toolbarAutoRefresh.stop(target);
                    }
                    else {
                        $.callList.toolbarAutoRefresh.start(target);
                    }
                }
            },
            // Grid toolbar logic
            initToolbar: function () {
                // Click handler for toolbar
                var commands = $('div.k-grid-custom-command span');
                commands.unbind('click');
                commands.click(function (e) {
                    e.preventDefault();
					var grid = $("#grid").data("kendoGrid");
					$(".active-filter").removeClass("active-filter");
                    var target = $(e.target).closest('div.k-grid-custom-command');
                    if (target.length > 0) {
                        target = target[0];
                        if (target) {
                            var cmd = target.getAttribute("data-toolbarcmd");
                            if (cmd) {
                                //if (target && target.dataset && target.dataset.toolbarcmd) {
                                switch (cmd) {
                                    case "toggle-fullscreen":
                                        if ($.callList.fullscreen == true)
                                            $.callList.fullscreen = undefined;
                                        else
                                            $.callList.fullscreen = true;
                                        $(window).trigger('resize');
                                        break;
                                    case "auto-refresh":
                                        $.callList.toolbarAutoRefresh.set(target);
                                        break;
                                    case "refresh":
                                        $.callList.setProgress(true);

                                        console.log("refresh");
                                        $.callList.uiElementGrid.dataSource.read();
                                        $.callList.uiElementGrid.refresh();
                                        $.callList.toolbarAutoRefresh.reset();
                                        console.log("refresh-end");
                                        break;
                                    case "reset-filters":
                                        //$.callList.uiElementGrid.destroy();
                                        var grid = $($.callList.uiElementName);
                                        grid.data("kendoGrid").destroy();
                                        grid.empty();
                                        $(window).off("resize");
                                        $.callList.init();
                                        break;
                                    case "reset-columns":
                                        $.callList.settings.resetColumnsToDefault();
                                        break;
                                    case "expand":
                                        $.callList.collapseExpand("expand");
                                        break;
                                    case "collapse":
                                        $.callList.collapseExpand("collapse");
                                        break;
                                    case "export-pdf":
                                        $.callList.uiElementGrid.saveAsPDF();
                                        break;
                                    case "filter-my":
                                        var f = $.callList.settings._getSavedFilters();
                                        $.callList.settings.resetFiltersToDefault(function () {
                                            $.callList.toolbarAutoRefresh.reset();
                                            $.callList.toolbarAutoRefresh.start();
                                        }, f.my_open_calls);
										$(target).addClass("active-filter");
										//console.log(f.my_open_calls);
                                        break;
                                    case "filter-unassigned":
                                        var f = $.callList.settings._getSavedFilters();
                                        $.callList.settings.resetFiltersToDefault(null, f.unassigned);
										$(target).addClass("active-filter");
                                        break;
                                    case "export-excel":
                                        $.callList.settings.calls._exportRequested = true;
                                        $.callList.uiElementGrid.saveAsExcel();
                                        break;
                                    case "save-default":
                                        $.callList.settings.saveFilter();
                                        break;
                                    case "load-default":
                                        $.callList.settings.loadFilter();
                                        break;
                                }
                            }
                        }
                    }
                });
                this.menuColumnsSelector.init();
            },
            init: function () {
                $(this.uiElementName).kendoGrid(this.settings.load());
                this.uiElementGrid = $(this.uiElementName).data("kendoGrid");
                //setTimeout(function () {
                //    $("div.k-grid-custom-command[data-toolbarcmd='filter-my']").find("span").first().click();
                //}, 10);
                this.addStyles();
                setAutoResize();
                if (this._initialLoad == true) {
                    setTimeout(function () { $.callList.settings.loadFilter(); }, 26);
                }
                this._initialLoad = false;
            },
            _jsonToCsv: function (array) {
                if (array.constructor === Array) {
                    var str = '';
                    $.each(array, function (idx, i) { str += (idx == 0) ? i : ',' + i; });
                    return str;
                }
                return array;
            },
            _jsonObjToParams: function (obj) {
                var str = '';
                $.each(obj, function (k, v) {
                    str += ((str == '') ? k : '&' + k) + "=" + v;
                });
                return str;
            },
            collapseExpand: function (direction) {
                //Get a collection of all rows in the grid
                var allMasterRows = $.callList.uiElementGrid.tbody.find('>tr.k-master-row');
                //Loop through each row and collapse or expand the row depending on set deriction
                if (direction == 'collapse') {
                    for (var i = 0; i < allMasterRows.length; i++) {
                        $.callList.uiElementGrid.collapseRow(allMasterRows.eq(i));
                    }
                } else if (direction == 'expand') {
                    for (var i = 0; i < allMasterRows.length; i++) {
                        $.callList.uiElementGrid.expandRow(allMasterRows.eq(i));
                    }
                }
            },
            _getFilter: function (options) {
                var paramsDefault = {
                    sessionNumber: sessionNumber,
                    status: $.callList._jsonToCsv($qad.statuses_server),
                    page: (options && options.data && options.data.page) ? options.data.page : 1,
                    call: '',
                    pageSize: (options && options.data && options.data.pageSize) ? options.data.pageSize : 100,
                    enduser: '',
                    serial: '',
                    'default': 'no', /* yes/no ?? */
                    noprdesc: '',
                    desc: '',
                    canameph: '',
                    severity: '',
                    calltype: '',
                    wrkcode: '',
                    datetimefrom: '', // eg 03/11/2015 (mm/dd/yyyy)
                    datetimeto: '', // 03/01/2015 (mm/dd/yyyy)
                    assign: '',
                    lc_engname: '',
                    area: '',
                    que: '',
                    domain: '',
                    screenHeight: $(window).height(),
                    browserName: 'chrome',
                    browserVersion: 7
                };
                if (options && options.data && options.data.filter && options.data.filter.filters) {
                    $.each(options.data.filter.filters, function (idx, f) {
                        if (f.field && f.value) {
                            //console.log(f.field + " = " + f.value);
                            switch (f.field) {
                                case "tt_status":
                                    if (f.value.indexOf($qad.statuses[0]) > -1) { // Use ACTIVE filter
                                        paramsDefault.status = $.callList.getActiveStatusesJson();
                                    } else {
                                        paramsDefault.status = f.value;
                                    }
                                    break;
                                case "tt_date":
                                    if (f.value) {
                                        var dateFilter = $.parseJSON(f.value);
                                        paramsDefault.datetimefrom = dateFilter.start;
                                        paramsDefault.datetimeto = dateFilter.end;
                                        // tt_date: { start: '', end: '' }
                                    }
                                    break;
                                case "tt_assign":
                                    if (f.value) {
                                        //$qad.assign_options = ["*My calls*", "*All calls*", "*Unassigned*"];
                                        var theAssignee = f.value.trim();
                                        if (theAssignee == $qad.assign_options[0]) {
											paramsDefault.status = $.callList.getActiveStatusesJson();
                                            paramsDefault.assign = "YES";
                                            console.log("my calls");
                                        } else if (theAssignee == $qad.assign_options[1]) {
                                            paramsDefault.assign = "";
                                            console.log("all calls");
                                        } else if (theAssignee == $qad.assign_options[2]) {
                                            paramsDefault.assign = "";
                                            paramsDefault.unassign = "yes";
                                            console.log("unassigned calls");
                                        } else {
                                            paramsDefault.lc_engname = theAssignee;
                                            console.log("filter by assignee where lc_engname" + " = " + theAssignee);
                                        }
                                    }
                                    break;
                                default:
                                    if (f.field && f.field.length > 3) {
                                        var fName = f.field.startsWith('tt_') ? f.field.substr(3) : f.field;
                                        paramsDefault[fName] = f.value;
                                        console.log('-- fname = ' + fName + ', fvalue = ' + f.value);
                                    }
                            }
                        }
                    });
                }
                return this._jsonObjToParams(paramsDefault);
            },
            load: function (options, onDataReady) {
                var filters = this._getFilter(options);
                console.log(filters);
                if ($.callList.__xhr && $.callList.__xhr.readyState != 4) {
                    console.log("--abort--");
                    $.callList.__xhr.abort();
                }
                $.callList.setProgress(true);


                $.callList.__xhr = $.ajax({
                    context: this,
                    //url: "https://c1t16991.itcs.hpicorp.net:1181/qadcsi/cgi-bin/msgr/service/srv_mfs_callist.html",
					url: "calllist_files/srv_mfs_callist.html",
                    type: "POST",
                    data: filters
                }).done(function (data) {
                    console.log("done");
                    $.callList.setProgress(false);
                    onDataReady(this.data.parse(data));
                }).fail(function (error) {
                    console.log(error);
                    $.callList.setProgress(false);

                    onDataReady(null);
                });
            },
            settings: { // Application settings & persistancy logic
                showColumnMenu: function (sender) {
                    var offset = $(sender).offset();
                    var fieldName = $(sender).data("field");
                    var th = $(grid.thead).find("th[data-field='" + fieldName + "']");

                    $(th).find(".k-header-column-menu:first").click();
					console.log()
                    $(".k-column-menu").parent().css({
                        top: offset.top + $(sender).outerHeight(),
                        left: offset.left
                    });
                },
                calls: {
                    _stateObjNameCalls: "HP.Indigo.QAD.CallList.last_calls_v1.01",
                    _exportRequested: false,
                    _sortRequested: false,
                    save: function (calls) {
                        if ($.callList.settings._hasLocalStorage) {
                            var asString = kendo.stringify(calls);
                            localStorage.setItem(this._stateObjNameCalls, asString);
                        } else {
                            console.log('no storage');
                        }
                    },
                    load: function () {
                        if ($.callList.settings._hasLocalStorage) {
                            var callsRaw = localStorage.getItem(this._stateObjNameCalls);
                            if (callsRaw) {
                                var calls = $.parseJSON(callsRaw);
                                if (calls) return calls;
                            }
                            return [];
                        } else {
                            console.log('no storage');
                        }
                    }
                },
                _stateObjName: "HP.Indigo.QAD.CallList.grid-state-v1.01",
                _hasLocalStorage: typeof (Storage) !== "undefined",
                save: function (settings) {
                    if (this._hasLocalStorage) {
                        var asString = kendo.stringify(settings);
                        localStorage.setItem(this._stateObjName, asString);
                        //var columnsRaw = localStorage.getItem(this._stateObjName);
                        //var columns = $.parseJSON(columnsRaw);
                    } else {
                        console.log('no storage');
                    }
                },
                loadFilter: function (name) {
                    //$.callList.settings.resetFiltersToDefault(null, f.unassigned);
                    if (this._hasLocalStorage) {
                        var savedRaw = localStorage.getItem(this._stateObjName + ".filter");
                        var savedFilters = $.parseJSON(savedRaw);
                        if (savedFilters && savedFilters.filters && savedFilters.filters.length > 0) {
                            $.callList.settings.resetFiltersToDefault(null, savedFilters);
                        } else {
                            console.log("no saved filter");
                            console.log(savedFilters);
                        }
                    } else {
                        console.log('no storage');
                    }
                },
                saveFilter: function (name) {
                    if (this._hasLocalStorage) {
                        var filters = $.callList.uiElementGrid.dataSource.filter();
                        var asString = kendo.stringify(filters);
                        localStorage.setItem(this._stateObjName + ".filter", asString);
                        $.popup.title("Save filter as default").content("The current filter has been saved as default. This filter will be loaded when the screen first opens or when the Load Default button is clicked").center().open();
                    }
                },
                // Saves the column index, width and visibility.
                _prepColumnsLoad: function (theOptions, theSavedColumns) {
                    if (theSavedColumns === undefined) {
                        console.log("Warning: No saved columns.");
                        return theOptions;
                    }
                    $.each(theOptions, function (idx, opt) {
                        $.each(theSavedColumns, function (idx, saved) {
                            if (saved && saved.field && opt && opt.field && opt.field == saved.field) {
                                if (saved.hidden !== undefined) opt.hidden = saved.hidden;
                                if (saved.width !== undefined) opt.width = saved.width;
                                if (saved.__index !== undefined) opt.__index = saved.__index;
                            }
                        });
                    });
                    var result = theOptions.sort(function (a, b) {
                        if (a.__index == b.__index) return 0;
                        return a.__index > b.__index ? 1 : -1;
                    });
                    return result;
                },
                // Loads the column index, width and visibility.
                _prepColumnsSave: function (kendoCols) {
                    var savedColumns = [];
                    $.each(kendoCols, function (idx, col) {
                        if (col && col.field) {
                            var theColumn = {
                                __index: idx,
                                field: col.field,
                                width: col.width
                            };
                            if (col.hidden) theColumn.hidden = true;
                            savedColumns.push(theColumn);
                        }
                    });
                    return savedColumns;
                },
                saveCurrent: function () {
                    setTimeout(function () {
                        var opts = $.callList.uiElementGrid.getOptions();
                        $.callList.settings.save({
                            columns: $.callList.settings._prepColumnsSave(opts.columns),
                            lastSaved: Date()
                        });
                    }, 702);

                },
                resetFiltersToDefault: function (onDoneCallback, optionalFilters) {
                    setTimeout(function () {
                        $("form.k-filter-menu button[type='reset']").trigger("click");
                        if (optionalFilters == undefined) optionalFilters = {};
                        $.callList.toolbarAutoRefresh.stop();
                        $.callList.uiElementGrid.dataSource.filter(optionalFilters);
                        //$.callList.uiElementGrid.dataSource.fetch();
                        //$.callList.uiElementGrid.refresh();

                        if (onDoneCallback) onDoneCallback();
                    }, 13);
                },
                resetColumnsToDefault: function () {
                    setTimeout(function () {
                        var self = $.callList.settings;
                        var def = self.getDefault();
                        var resetColumns = {
                            columns: self._prepColumnsSave(def.columns),
                            lastSaved: Date()
                        };
                        self.save(resetColumns);
                        $.callList.uiElementGrid.setOptions({ columns: def.columns });
                        $.callList.uiElementGrid.refresh();
                        $.callList.toolbarAutoRefresh.reset();
                    }, 130);
                },
                getDefault: function () {
                    var def = $.extend(true, {}, this._default);
                    var forEachColumn = function (idx, c) {
                        if (c.field && c.field.length > 0 && c.template == undefined) {
                            c.template = "#= " + c.field + " ? " + c.field + " : '' #"; // Default to N/A if data not available
                        }
                        c.attributes = { style: "text-align:left;" } // Justify left all columns
                    }
                    $.each(def.columns, forEachColumn);
                    $.each($.callList.settings._defaultLineColumns, forEachColumn);
                    return def;
                },
                load: function () {
                    var settings = this.getDefault();
                    if (this._hasLocalStorage) {
                        var savedRaw = localStorage.getItem(this._stateObjName);
                        var savedSettings = $.parseJSON(savedRaw);
                        if (savedSettings && savedSettings.columns) {
                            var columnsFromStore = this._prepColumnsLoad(settings.columns, savedSettings.columns);
                            settings.columns = columnsFromStore;
                        }
                    } else {
                        console.log('no storage');
                    }
                    return settings;
                },
                _getSavedFilters: function () {
                    return {
                        //unassigned: { "logic": "and", "filters": [{ "field": "tt_status", "operator": "eq", "value": "NEW" }, { "field": "tt_wrkcode", "operator": "eq", "value": "UNSCHEDL" }, { "field": "tt_assign", "operator": "eq", "value": $qad.assign_options[2] }] },
                        unassigned: { "logic": "and", "filters": [{ "field": "tt_wrkcode", "operator": "eq", "value": "UNSCHEDL" }, { "field": "tt_assign", "operator": "eq", "value": $qad.assign_options[2] }] },
                        my_open_calls: { "logic": "and", "filters": [{ "field": "tt_assign", "operator": "eq", "value": $qad.assign_options[0] } ] }
                    };
                },
                _defaultLineColumns: [
                                { field: "ttdet_line", title: "Line", width: "52px" },
                                {
                                    field: "ttdet_eng_name",
                                    title: "Line Engineer",
                                    width: "314px",
                                    template: "#= (ttdet_eng_email) ? kendo.format('<a href=mailto:{0}>{1}</a>', ttdet_eng_email, ttdet_eng_name) : (ttdet_eng_name) ? ttdet_eng_name : '' #",
                                },
                                { field: "ttdet_eng_group", title: "Line Engineer Group", width: "216px" },
                                {
                                    field: "ttdet_statusdate", title: "Line Status date", width: "130px",
                                    format: "{0:yyyy-MM-dd}",
                                    template: "#= ttdet_statusdate ? kendo.toString(kendo.parseDate(ttdet_statusdate, 'yyyy-MM-dd'), 'MM/dd/yy') : '' #",
                                    hidden: true

                                },
                                {
                                    field: "ttdet_statustime", title: "Time", width: "130px",
                                    format: "{0:HHmm}",
                                    template: "#= ttdet_statustime ? kendo.toString(kendo.parseDate(ttdet_statustime, 'HHmm'), 'HH:mm') : '' #",
                                    hidden: true
                                },
                                { field: "ttdet_status", title: "Line Status", width: "216px" },
                ],
                _default: {
                    toolbar: [{
                        template:
                            '<div style="float:left">' +
                            '<div data-toolbarcmd="toggle-fullscreen" class="k-button k-grid-custom-command"><span class="k-icon k-i-maximize"></span><span style="margin-left:5px;">Fullscreen</span></div>' +
                            '<div data-toolbarcmd="reset-columns" class="k-button k-grid-custom-command"><span class="k-icon k-i-columns"></span><span style="margin-left:5px;">Reset columns</span></div>' +
                            '<div id="select-columns" class="k-button k-i-columns">Columns</div>' +
                            '<div data-toolbarcmd="expand" class="k-button k-grid-custom-command"><span class="k-icon k-i-collapse-w"></span><span style="margin-left:5px;">Expand</span></div>' +
                            '<div data-toolbarcmd="collapse" class="k-button k-grid-custom-command"><span class="k-icon k-i-expand-w"></span><span style="margin-left:5px;">Collapse</span></div>' +
                            '&nbsp;&nbsp;Export:' +
                            '<div data-toolbarcmd="export-pdf" class="k-button k-grid-custom-command"><span class="k-icon k-i-pdf"></span><span style="margin-left:5px;">PDF</span></div>' +
                            '<div data-toolbarcmd="export-excel" class="k-button k-grid-custom-command"><span class="k-icon k-i-excel"></span><span style="margin-left:5px;">Excel</span></div>' +
                            '</div>' +
                            '<div style="float:right"> Filters: ' +
                            '<div data-toolbarcmd="filter-unassigned" class="k-button k-grid-custom-command"><span class="k-icon k-i-funnel"></span><span style="margin-left:5px;">Unassigned</span></div>' +
                            '<div data-toolbarcmd="filter-my" class="k-button k-grid-custom-command"><span class="k-icon k-i-funnel"></span><span style="margin-left:5px;">My calls</span></div>' +
                            '<div data-toolbarcmd="load-default" class="k-button k-grid-custom-command"><span class="k-icon k-i-funnel"></span><span style="margin-left:5px;">Default</span></div>' +
                            '<div data-toolbarcmd="save-default" class="k-button k-grid-custom-command"><span class="k-icon k-i-funnel"></span><span style="margin-left:5px;">Save as default</span></div>' +
                            '<div data-toolbarcmd="reset-filters" class="k-button k-grid-custom-command"><span class="k-icon k-i-funnel-clear"></span><span style="margin-left:5px;">Clear all</span></div>' +
                            '<div data-toolbarcmd="refresh" class="k-button k-grid-custom-command"><span class="k-icon k-i-refresh"></span><span style="margin-left:5px;">Refresh now</span></div>' +
                            '<div data-toolbarcmd="auto-refresh" class="k-button k-grid-custom-command"><span class="k-icon k-i-refresh"></span><span style="margin-left:5px;">Auto Refresh</span></div>' +
                            '</div>' +
                        '<div style="font-size: 17px; clear:both;background-color:white;width:100%;text-align:center;" id="toolbar_msg"><span class="k-icon k-i-funnel" />&nbsp;&nbsp;Please select a column filter or click one of the filter buttons to load data</div>'
                    }],
                    filterable: {
                        extra: false,
                        operators: {
                            string: {
                                eq: "Is equal to"
                            }
                        }
                    },
                    selectable: true,
					columnMenu: true,
                    dataSource: {
                        pageSize: 100,
                        type: "json",
                        serverSorting: false,
                        serverPaging: true,
                        serverFiltering: true,
                        schema: {
                            data: function (result) {
                                return result;
                            },
                            total: function (result) {
                                return result && result[0] && result[0].tt_tot ? result[0].tt_tot : 0;
                            },
                            pageSize: function (result) {
                                return result && result[0] && result[0].tt_tot ? result[0].tt_rows : 0;
                            },
                            model: {
                                id: "tt_call",
                                fields: {
                                    tt_call: { type: "string" },
                                    tt_date: { type: "date" },
                                    tt_nxt_datetime: { type: "string"},
                                    tt_enduser: { type: "string" },
                                    tt_serial: { type: "string" },
                                    tt_pr_desc: { type: "string" },
                                    tt_ca_name: { type: "string" },
                                    tt_severity: { type: "string" },
                                    tt_calltype: { type: "string" },
                                    tt_wrkcode: { type: "string" },
                                    tt_date: { type: "string" },
                                    tt_assign: { type: "string" },
                                    tt_area: { type: "string" },
                                    tt_que: { type: "string" },
                                    tt_status: { type: "string" },
                                    tt_total: { type: "number" },
                                    tt_domain: { type: "string" },
                                    tt_cr_hold: { type: "string" }
                                }
                            }
                        },
                        transport: {
                            read: function (options) {
                                console.log(kendo.stringify(options));
                                
                                
                                if ($.callList.settings.calls._exportRequested == true || $.callList.settings.calls._sortRequested == true) {
                                    $.callList.settings.calls._exportRequested = false;
                                    $.callList.settings.calls._sortRequested = false;
                                    console.log('---ooo---');
                                    options.success($.callList.settings.calls.load());
                                } else {
                                    if (options && options.data && options.data.filter && options.data.filter.filters && options.data.filter.filters.length > 0) {
                                        $.callList.load(options, function (result) {
                                            console.log(result);
                                            //$($.callList.uiElementName).find("div.k-loading-mask").remove();
                                            if (result && result.calls) {
                                                if (result.calls.CalList && result.calls.CalList.length >= 0) {
                                                    $("#toolbar_msg").hide();
                                                    $.callList.settings.calls.save(result.calls.CalList);
                                                    options.success(result.calls.CalList);
                                                    $.callList.toolbarAutoRefresh.reset();
                                                } else {
                                                    options.error();
                                                    $.popup.content("No data returned from server for the request, this may be due to too specific filter requested by the user. If you feel this is not an error, it may also be a problem with the CSI portal, try to log off and log in again").center().open();
                                                    $.callList.toolbarAutoRefresh.stop();
                                                }
                                            } else {
                                                options.error();
                                                $.popup.content("Error: Could not get data from server. This may be a problem with the CSI portal, try to log off and log in again").center().open();
                                                $.callList.toolbarAutoRefresh.stop();
                                            }
                                        });
                                    } else {
                                        $("#toolbar_msg").show();
                                        $.callList.toolbarAutoRefresh.stop();
                                        options.success([]);
                                    }
                                }
                                
                            },
                        }
                    },
                    autoSync: true,
                    autoBind: false,
                    sortable: {
                        mode: 'multiple',
                    },
                    pageable: {
                        pageSizes: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]
                    },
                    resizable: true,
                    columnReorder: function (e) { $.callList.settings.saveCurrent() },
                    columnResize: function (e) { $.callList.settings.saveCurrent() },
                    columnHide: function (e) { $.callList.settings.saveCurrent() },
                    columnShow: function (e) { $.callList.settings.saveCurrent() },
                    columnMenu: true,
                    reorderable: true,
                    filterMenuInit: function (e) {
						e.container.data().kendoPopup.bind("activate", function (ae) {
                            this.element.find("input[type=text]:visible:first").focus()
                          });
                        // Remove filter type label from filter
                        var firstValueDropDown = e.container.find("select:eq(0)").data("kendo" + "Drop" + "DownList"); // avoid search/replace probs
                        setTimeout(function () {
                            firstValueDropDown.wrapper.hide();
                        });
                    },
					columnMenuInit: function (e) {
						//var menu = e.container.find(".k-menu").data("kendoMenu");
						//var field = e.field;
						

						// Option 1: use the kendoMenu API ...
						/* menu.append({
							text: "Rename"
						}); */

						// Option 2: or create custom html and append manually ..
						//$(e.container).find("ul").append('<li id="my-id" class="k-item k-state-default" role="menuitem"><span class="k-link"><b>Manual entry</b></span></li>');

						// event handler
						/* menu.bind("select", function (e) {
							var menuText = $(e.item).text();
							if (menuText == "Rename") {
								console.log("Rename for", field);
							} else if (menuText === "Manual entry") {
								console.log("Manual entry for", field);
							}
						}); */
					},
                    dataBound: function () {
                        $.callList.initToolbar();
                        // Remove alt. row style
                        this.tbody.find("tr.k-alt").removeClass("k-alt");

                        // Set row style by call details
                        dataView = this.dataSource.view();
                        for (var i = 0; i < dataView.length; i++) {
                            var dv = dataView[i];
                            if (dv) {
                                var uid = dataView[i].uid;
                                var row = $.callList.uiElementGrid.tbody.find("tr[data-uid='" + uid + "']");
                                // Remove arrow
                                if (dv.CalListDet === undefined || dv.CalListDet.length == 0) {
                                    row.find('.k-hierarchy-cell a').css({ opacity: 0.0, cursor: 'default' }).click(function (e) { e.stopImmediatePropagation(); return false; });
                                }
                                // Color lines.
                                if (dv.tt_status != null) {
                                    switch (dataView[i].tt_status.toLowerCase()) {
                                        case "new":
                                            // Need empty assignee, "elipsed_seconds", workcode to be unscheduled.
                                            if (!dv.tt_assign && dv.tt_elapsed_seconds !== undefined && dv.tt_wrkcode !== undefined && dv.tt_wrkcode == "UNSCHEDL") {
                                                var bgColor = undefined;
                                                var fgColor = undefined;
                                                if (dv.tt_elapsed_seconds < 10 * 60) {
                                                    bgColor = "green";
                                                    fgColor = "white";
                                                } else if (dv.tt_elapsed_seconds >= 10 * 60 && dv.tt_elapsed_seconds < 20 * 60) {
                                                    bgColor = "yellow";
                                                    fgColor = "black";
                                                } else if (dv.tt_elapsed_seconds >= 20 * 60) {
                                                    bgColor = "red";
                                                    fgColor = "white";
                                                }
                                                if (bgColor && fgColor) row.css({ 'background-color': bgColor, color: fgColor });
                                            }
                                            if (dv.tt_severity && dv.tt_severity == "A") {
                                                row.find("td:textEquals('" + dv.tt_severity + "')").css("background", "yellow").addClass("blink_text").css({ "color": "black" });
                                            }
                                            break;
                                        case "dispatch":
                                        case "dispatched":
                                            if (dv.tt_elapsed_seconds !== undefined && dv.tt_elapsed_seconds >= 30 * 60) {
                                                row.css({ 'background-color': '#74C2E1', color: 'red' });
                                            } else {
                                                row.css({ 'background-color': '#74C2E1', color: 'black' });
                                            }
                                            break;
                                        case "decline":
                                        case "declined":
                                            row.css({ 'background-color': '#74C2E1', color: 'red', 'font-weight': 'bold' });
                                            break;
                                    }
                                }
                            }
                        }
						var sortArray = $("#grid").data("kendoGrid").dataSource.sort();
						if (sortArray) {
							console.log(kendo.stringify(sortArray));
							for (var i = 0; i < sortArray.length; i++) {
								var cHTML = $("th[data-field=" + sortArray[i].field + "]").data("title");

								$("#grid th[data-field=" + sortArray[i].field + "] .k-link").html(cHTML + "  (" + (i + 1) + ")");
							}

							var sortedColumns = sortArray.map(function(o) {
								return o.field
							});

							var columns = $("#grid").data("kendoGrid").columns;
							for (i in columns) {
								if (sortedColumns.indexOf(columns[i].field) == -1)
								{
									var cHTML = $("th[data-field=" + columns[i].field + "]").data("title");
									$("#grid th[data-field=" + columns[i].field + "] .k-link").html(cHTML);
								}
							}

						}
					},
                    detailInit: function detailInit(e) {
                        $("<div style='width: 999px'/>").appendTo(e.detailCell).kendoGrid({
                            dataSource: {
                                data: e.data.CalListDet,
                                schema: {
                                    model: {
                                        fields: {
                                            ttdet_call: { type: "string" },
                                            ttdet_eng_name: { type: "string" },
                                            ttdet_eng_group: { type: "string" },
                                            ttdet_statusdate: { type: "string" },
                                            ttdet_statustime: { type: "string" },
                                            //ttdet_classification: { type: "string" }
                                        }
                                    }
                                }
                            },
                            scrollable: true,
                            sortable: true,
                            columns: $.callList.settings._defaultLineColumns
                        });
                    },
                    columns: [
                        {
                            field: "tt_call",
                            title: "Call ID",
                            width: "110px",
                            template: function (e) {
                                return $('<a style="color:inherit;text-decoration:underline;" target="_blank">' + e.tt_call + '</a>').attr("href", "../service/callstatus.html?sessionNumber=" + sessionNumber + "&screenHeight=" + "screenHeight" + "&browserName=" + browserName + "&browserVersion=" + browserVersion + "&callId=" + e.tt_call + "&callIdDomain=" + e.tt_domain).prop('outerHTML');
                            }
                        },
                        { field: "tt_classification", title: "Product", width: "180px", filterable: true },
                        {
                            field: "tt_calltype",
                            title: "Call Type",
                            width: "130px",
                            filterable: {
                                ui: function (fElement) {
                                    fElement.kendoMultiSelect({
                                        dataSource: $qad.call_types,
                                        optionLabel: "--Select Value--"
                                    })
                                }
                            }
                        },
                        {
                            field: "tt_desc",
                            title: "Call Description",
                            width: "410px",

                        },
                        {
                            field: "tt_severity",
                            title: "Severity",
                            width: "91px",
                            template: "#= tt_severity ? '<span id=tt_severity>' + tt_severity + '</span>' : '' #",
                            filterable: {
                                ui: function (fElement) {
                                    fElement.kendoMultiSelect({
                                        dataSource: $qad.call_severity,
                                        optionLabel: "--Select Value--"
                                    })
                                }
                            }
                        },
                        {
                            field: "tt_date",
                            title: "Open time (EU Time)",
                            filterable: {
                                ui: function (fElement) {
                                    var onClose = function () {
                                        console.log(fElement);
                                    }
                                    $(fElement).width = "999px";
                                    fElement.daterangepicker({ onClose: onClose });
                                }
                            },
                            format: "{0:MM/dd/yy,HHmm}",
                            template: "#= tt_date ? kendo.toString(kendo.parseDate(tt_date, 'MM/dd/yy,HHmm'), 'dd-MMM-yyyy HH:mm') : '' #",
                            width: "182px",
                            extra: false,
                            showOperators: false
                        },
                        {
                            field: "tt_elapsed_seconds",
                            title: "Age",
                            width: "150px",
                            filterable: false,
                            template: function (e) {
                                if (e.tt_elapsed_seconds)
                                    return moment().add(e.tt_elapsed_seconds * -1, 'seconds').fromNow(true);
                                return '';
                            }
                        },
                        {
                            field: "tt_since_modified",
                            title: "Since modified",
                            width: "150px",
                            filterable: false,
                            template: function (e) {
                                if (e.tt_since_modified)
                                    return moment().add(e.tt_since_modified * -1, 'seconds').fromNow();
                                return '';
                            }
                        },
                        {
                            field: "tt_que",
                            title: "Queue",
                            width: "110px",
                            filterable: {
                                ui: function (fElement) {
                                    fElement.kendoMultiSelect({
                                        dataSource: $qad.queues,
                                        optionLabel: "--Select Value--"
                                    })
                                }
                            }
                        },
                        {
                            field: "tt_status",
                            title: "Status",
                            filterable: {
                                ui: function (fElement) {
                                    fElement.kendoMultiSelect({
                                        dataSource: $qad.statuses,
                                        optionLabel: "--Select Value--"
                                    })
                                }
                            },
                            width: "110px"
                        },
                        {
                            field: "tt_next_status_name",
                            title: "Next status",
                            width: "232px",
                            filterable: true
                        },
                        {
                            field: "tt_nxt_datetime",
                            title: "Next Status Time",
                            //format: "{0:yyyy-MM-dd,HHmm}",
                            template: "#= (tt_next_status_name) && tt_nxt_datetime ? kendo.toString(kendo.parseDate(tt_nxt_datetime, 'yyyy-MM-dd,HHmm'), 'dd-MMM-yyyy HH:mm') : '' #",
                            width: "141px",
                            filterable: false
                        },
                        {
                            field: "tt_assign",
                            title: "Assignee",
                            width: "280px",
                            template: "#= (tt_eng_email) ? kendo.format('<a href=mailto:{0}?subject=Service%20Call:%20{2}%20for%20SN:%20{3}%20User%20Name:%20{4}&body=Open%20Date:{15}%0D%0AArea:%20{6}%0D%0ACall%20Description:%20{5}%0D%0ACaller%20Name:%20{7}%0D%0ACaller%20Phone%20Number%20:%20{8}%20%0D%0ACall%20Type:%20{9}%0D%0AStatus:%20{10}%0D%0ADomain:%20{11}%0D%0AProduct:%20{12}%0D%0ASeverity:%20{13}%0D%0AEnd%20User:%20{14}>{1}</a>', tt_eng_email, tt_assign, tt_call, tt_serial,  replaceSpaceWithHTMLEntity(tt_eu_name), replaceSpaceWithHTMLEntity(tt_desc), replaceSpaceWithHTMLEntity(tt_area),  replaceSpaceWithHTMLEntity(tt_ca_name), tt_ca_phone, tt_calltype, replaceSpaceWithHTMLEntity(tt_status), tt_domain, replaceSpaceWithHTMLEntity(tt_pr_desc), tt_severity, tt_enduser, replaceSpaceWithHTMLTabEntity(kendo.toString(kendo.parseDate(tt_date, 'MM/dd/yy,HHmm'), 'ddMMMyyyy HH:mm'))) : (tt_assign) ? tt_assign : '' #",
                            filterable: {
                                ui: function (fElement) {
                                    fElement.kendoComboBox({
                                        dataSource: $qad.assign_options,
                                        optionLabel: "--Select Value--"
                                    })
                                }
                            }
                        },
                        {
                            field: "tt_eng_group",
                            title: "Eng. Group",
                            width: "130px",
                            filterable: true
                        },
                        {
                            field: "tt_area",
                            title: "Service Area",
                            width: "130px",
                            filterable: {
                                ui: function (fElement) {
                                    fElement.kendoMultiSelect({
                                        dataSource: $qad.areas,
                                        optionLabel: "--Select Value--"
                                    })
                                }
                            }

                        },
                        {
                            field: "tt_enduser",
                            title: "End user",
                            width: "110px",

                        },
                        {
                            field: "tt_eu_name",
                            title: "End user name",
                            width: "360px"

                        },
                        {
                            field: "tt_ca_name",
                            title: "Caller Name",
                            width: "182px"
                        },
                        {
                            field: "tt_ca_phone",
                            title: "Caller Phone",
                            width: "182px"
                        },

                        {
                            field: "tt_serial",
                            title: "Serial #",
                            width: "130px",
                            template: '#= tt_serial ? kendo.format("<a href=\'https://service.myhpindigo.com/\\#/rg?{0}\' target=\'_blank\'>{0}</a>", tt_serial) : "" #'
                        },
                        {
                            field: "tt_pr_desc",
                            title: "Product Description",
                            width: "390px"
                        },
                        {
                            field: "tt_cr_hold",
                            title: "On hold",
                            template: "#: tt_cr_hold == 'true' ? 'Yes' : 'No' #",
							type: "boolean",
							width: "52px",
							filterable:  {
                                ui: function (fElement) {
                                    fElement.kendoDropDownList({
										dataSource: [{ id: "true", name: "Yes" },{ id: "false", name: "No" }],
										dataTextField: "name",
										dataValueField: "id"
										})
								}
                            }
                        },
                        {
                            field: "tt_wrkcode",
                            title: "Work code",
                            width: "110px",
                            filterable: {
                                ui: function (fElement) {
                                    fElement.kendoMultiSelect({
                                        dataSource: $qad.work_codes,
                                        optionLabel: "--Select Value--"
                                    })
                                }
                            }
                        },
                        {
                            field: "tt_domain",
                            title: "Domain",
                            filterable: {
                                ui: function (fElement) {
                                    fElement.kendoMultiSelect({
                                        dataSource: $qad.domains,
                                        optionLabel: "--Select Value--"
                                    })
                                }
                            },
                            width: "91px"
                        }
                    ]
                }
            }
        }
        
        function setAutoResize() {
            /* On resize, set the #content div to the size of the window */
            $($.callList.uiElementName).css('font-size', "14px");
            var onResize = function () {
                var width = $("body").width();
                var height = $(window).height();//- 234;
                var setCssValue = undefined;
                var heightReduce = 0;
                if ($.callList.fullscreen) {
                    setCssValue = {
                        'text-align':'center',
                        position: 'absolute',
                        width: "100%",
                        height: "100%",
                        top: 0, right: 0,
                        'background-color': 'black',
                        'z-index': 99999,
                        margin: 0,
                        padding: 0,
                        'min-width': '',
                        'min-height': '',
                        'max-width': '',
                        'max-height': '',
                        overflow: 'hidden'
                    };
                    console.log("--fulls--");
                }
                else {
                    heightReduce = 234;
                    setCssValue = {
                        position: 'inherit',
                        width: width,
                        height: '',
                        'min-width': 1024,
                        'max-width': width - 69,
                        'min-height': '',
                        top: '', right: '',
                        bottom: '', left: '',
                        'background-color': 'inherit',
                        'z-index': 'inherit'
                    };
                    $('#content').css('width', width);
                }
                $('#grid-fullscreen').css(setCssValue);
                $.callList.uiElementGrid.setOptions({ height: height - heightReduce, width: width });
                $.callList.uiElementGrid.refresh();
                $.callList.toolbarAutoRefresh.reset();
                if ($.callList.loadingData) {
                    $.callList.setProgress(true);
                }
            };
            onResize();
            $(window).resize(onResize);
        }
        $.popup = null;
        $(document).ready(function () {
            if (typeof String.prototype.startsWith != 'function') {
                // see below for better implementation!
                String.prototype.startsWith = function (str) {
                    return this.indexOf(str) === 0;
                };
            }
            // add text equals qualifier - used for text blinking scenario (tt_severity)
            $.expr[':'].textEquals = $.expr.createPseudo(function (arg) {
                return function (elem) {
                    return $(elem).text().match("^" + arg + "$");
                };
            });
            $.popup = $("#popup").kendoWindow({
                width: "314px",
                height: "260px",
                modal: true,
                title: "Server/Network Error",
                visible: false
            }).data("kendoWindow");
            $qad.assign_options = ["*My calls*", "*All calls*", "*Unassigned*"];
            $qad.statuses.splice(0, 0, "*ACTIVE*");
            $qad.statuses_server = $qad.statuses.slice(1, $qad.statuses.length);
            $('#loader').hide();
            $.callList.init();
        });
    })(jQuery, window);
    (function ($) {
        var originalSort = kendo.data.DataSource.fn.sort;
        kendo.data.DataSource.fn.sort = function (e) {
            var calls = $.callList.settings.calls.load();
            if (calls && calls.length > 0) {
                var callsTotal = calls[0].tt_tot;
                if (callsTotal > 0 && arguments.length > 0) {
                    var pSize = $.callList.grid().data("kendoGrid").dataSource.pageSize();
                    if (callsTotal > pSize) {
                        $.popup.title("Possibly unexpected sort results.").content("The list can’t be sorted, please increase the amount calls per page.").center().open();
						return;
                    }
                    $.callList.settings.calls._sortRequested = true;
                    $.event.trigger('beforeSort', [e, $(this)]);
					/* $("#grid thead").find("th > a > .sort-order").remove();
					for (var i = 0, len = sorts.length; i < len; i++) {
						var x = sorts[i];
						$("th[data-field='" + x.field + "'] > a").append("<span class='sort-order'>" + (i + 1) + "</span>");
					} */
                }
            }
			
            return originalSort.apply(this, arguments);
        };
    })(jQuery);
	function replaceSpaceWithHTMLEntity(value) {
		var re = /\s/g;
		var newstr = value.replace(re, '%20');
		return newstr;
	}
	function replaceSpaceWithHTMLTabEntity(value) {
		var re = /\s/g;
		var newstr = value.replace(re, '%09');
		return newstr;
	}